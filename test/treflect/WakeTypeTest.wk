module treflect;

import wunit.Asserts;
import treflect.WakeType;
import treflect.WakeListType;
import treflect.WakeClassType;
import treflect.WakeOptionalType;
import treflect.WakeLambdaType;
import treflect.WakeParameterizedType;
import treflect.ImportFilterer;
import treflect.SpecificWakeType;
import treflect.ReflectionProvider;

@TestClass
every WakeTypeTest is:

	provides
		WakeType,
		ImportFilterer,
		WakeType:class <- {
			var WakeType from this;
			WakeType.type = 2;
			WakeType.WakeClassType = WakeClassType from this;
			return WakeType;
		},
		WakeType:lambda <- {
			var WakeType from this;
			WakeType.type = 1;
			WakeType.WakeLambdaType = WakeLambdaType from this;
			return WakeType;
		},
		WakeType:classlist <- {
			var WakeType from this;
			WakeType.type = 7;
			WakeType.WakeListType = WakeListType:classlist from this;
			return WakeType;
		},
		WakeType:optionalclass <- {
			var WakeType from this;
			WakeType.type = 8;
			WakeType.WakeOptionalType = WakeOptionalType:optionalclass from this;
			return WakeType;
		},
		WakeClassType, WakeLambdaType,
		WakeListType:classlist <- WakeListType(WakeType:class),
		WakeOptionalType:optionalclass <- WakeOptionalType(WakeType:class),
		WakeType:contained, //Bug!! Need to declare this
		Exception,
		ReflectionProvider;

	setClassname(WakeType, Text) {
		var WakeClassType? = WakeType.WakeClassType;
		if WakeClassType exists WakeClassType.classname = Text;
	}

	WakeClassType -- getClass(WakeType) {
		var WakeClassType? = WakeType.WakeClassType;
		if WakeClassType exists return WakeClassType;
		throw Exception from this;
	}

	WakeLambdaType -- getLambda(WakeType) {
		var WakeLambdaType? = WakeType.WakeLambdaType;
		if WakeLambdaType exists return WakeLambdaType;
		throw Exception from this;
	}

	WakeListType -- getList(WakeType) {
		var WakeListType? = WakeType.WakeListType;
		if WakeListType exists return WakeListType;
		throw Exception from this;
	}

	WakeOptionalType -- getOptional(WakeType) {
		var WakeOptionalType? = WakeType.WakeOptionalType;
		if WakeOptionalType exists return WakeOptionalType;
		throw Exception from this;
	}

	@Test
	~[ test .getNeeededImports() uses classname ]~(Asserts) {
		var WakeType:class from this;
		setClassname(WakeType, "Test");

		Asserts.that(WakeType.getNeededImports().getSize())Equals(1);
		Asserts.that(WakeType.getNeededImports()[0])Equals("Test");
	}

	@Test
	~[ test .getNeededImports() skips primitives ]~(Asserts) {
		var WakeType:class from this;
		setClassname(WakeType, "lang.Int");
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		setClassname(WakeType, "lang.Num");
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		setClassname(WakeType, "lang.Text");
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		setClassname(WakeType, "lang.List");
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		setClassname(WakeType, "lang.Bool");
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		setClassname(WakeType, "lang.Exception");
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		setClassname(WakeType, "lang.Char");
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
	}

	@Test
	~[ test .getNeeededImports() recurses to parameters ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		setClassname(WakeType, "Test");
		setClassname($WakeType, "Hey");
		getClass(WakeType).parameters.push($WakeType);

		Asserts.that(WakeType.getNeededImports().getSize())Equals(2);
		Asserts.that(WakeType.getNeededImports()[0])Equals("Test");
		Asserts.that(WakeType.getNeededImports()[1])Equals("Hey");
	}

	@Test
	~[ test .getNeeededImports() skips duplicates from parameters ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		setClassname(WakeType, "Test");
		setClassname($WakeType, "Test");
		getClass(WakeType).parameters.push($WakeType);

		Asserts.that(WakeType.getNeededImports().getSize())Equals(1);
		Asserts.that(WakeType.getNeededImports()[0])Equals("Test");
	}

	@Test
	~[ test .getNeededImports() uses return types and arguments ]~(Asserts) {
		var WakeType:lambda from this;
		var $WakeType:class from this;
		var $$WakeType:class from this;
		setClassname($WakeType, "MeTest");
		setClassname($$WakeType, "MeTestMe");
		getLambda(WakeType).returntype = $WakeType;
		getLambda(WakeType).arguments.push($$WakeType);
		Asserts.that(WakeType.getNeededImports().getSize())Equals(2);
		Asserts.that(WakeType.getNeededImports()[0])Equals("MeTestMe");
		Asserts.that(WakeType.getNeededImports()[1])Equals("MeTest");
	}

	@Test
	~[ test .getPureName on array ]~(Asserts) {
		var WakeType:classlist from this;
		setClassname(getList(WakeType).contained, "Test");
		Asserts.that(WakeType.getPureName())Equals("Test[]");
	}

	@Test
	~[ test .getPureName on generic ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		var $$WakeType:class from this;
		setClassname(WakeType, "Bears");
		setClassname($WakeType, "Beets");
		setClassname($$WakeType, "BattlestarGalactica");

		getClass(WakeType).parameters.push($WakeType);
		Asserts.that(WakeType.getPureName())Equals("Bears{Beets}");
		getClass(WakeType).parameters.push($$WakeType);
		Asserts.that(WakeType.getPureName())Equals("Bears{Beets,BattlestarGalactica}");
	}

	@Test
	~[ test .getPureName on arrayed generic ]~(Asserts) {
		var WakeType:classlist from this;
		var $WakeType:class from this;
		setClassname(getList(WakeType).contained, "Bears");
		setClassname($WakeType, "Beets");

		getClass(getList(WakeType).contained).parameters.push($WakeType);
		Asserts.that(WakeType.getPureName())Equals("Bears{Beets}[]");
	}

	@Test
	~[ test .getPureName on optional ]~(Asserts) {
		var WakeType:optionalclass from this;
		setClassname(getOptional(WakeType).contained, "Bears");

		Asserts.that(WakeType.getPureName())Equals("Bears?");
	}

	@Test
	~[ test methods don't import a classname ]~(Asserts) {
		var WakeType:lambda from this;
		WakeType.type = 1;
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
	}
