import Asserts;
import WakeType;
import ImportFilterer;

every WakeTypeTest is:

	provides WakeType, ImportFilterer,
		WakeType:class <- { var WakeType from this; WakeType.type = 2; return WakeType; };

	~[ test .getNeeededImports() uses classname ]~(Asserts) {
		var WakeType:class from this;
		WakeType.classname = "Test";

		Asserts.that(WakeType.getNeededImports().getSize())Equals(1);
		Asserts.that(WakeType.getNeededImports()[0])Equals("Test");
	}

	~[ test .getNeededImports() skips primitives ]~(Asserts) {
		var WakeType:class from this;
		WakeType.classname = "Num";
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		WakeType.classname = "Text";
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		WakeType.classname = "List";
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
		WakeType.classname = "Bool";
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
	}

	~[ test .getNeeededImports() recurses to parameters ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		WakeType.classname = "Test";
		$WakeType.classname = "Hey";
		WakeType.parameters.push($WakeType);

		Asserts.that(WakeType.getNeededImports().getSize())Equals(2);
		Asserts.that(WakeType.getNeededImports()[0])Equals("Test");
		Asserts.that(WakeType.getNeededImports()[1])Equals("Hey");
	}

	~[ test .getNeeededImports() skips duplicates from parameters ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		WakeType.classname = "Test";
		$WakeType.classname = "Test";
		WakeType.parameters.push($WakeType);

		Asserts.that(WakeType.getNeededImports().getSize())Equals(1);
		Asserts.that(WakeType.getNeededImports()[0])Equals("Test");
	}

	~[ test .getNeededImports() uses return types and arguments ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		var $$WakeType:class from this;
		WakeType.classname = "Test";
		$WakeType.classname = "MeTest";
		$$WakeType.classname = "MeTestMe";
		WakeType.returntype = $WakeType;
		WakeType.arguments.push($$WakeType);
		Asserts.that(WakeType.getNeededImports().getSize())Equals(3);
		Asserts.that(WakeType.getNeededImports()[0])Equals("Test");
		Asserts.that(WakeType.getNeededImports()[1])Equals("MeTestMe");
		Asserts.that(WakeType.getNeededImports()[2])Equals("MeTest");
	}

	~[ test .getPureName on array ]~(Asserts) {
		var WakeType:class from this;
		WakeType.classname = "Test";
		WakeType.arrayed = 1;
		Asserts.that(WakeType.getPureName())Equals("Test[]");
		WakeType.arrayed = 2;
		Asserts.that(WakeType.getPureName())Equals("Test[][]");
	}

	~[ test .getPureName on generic ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		var $$WakeType:class from this;
		WakeType.classname = "Bears";
		$WakeType.classname = "Beets";
		$$WakeType.classname = "BattlestarGalactica";

		WakeType.parameters.push($WakeType);
		Asserts.that(WakeType.getPureName())Equals("Bears{Beets}");
		WakeType.parameters.push($$WakeType);
		Asserts.that(WakeType.getPureName())Equals("Bears{Beets,BattlestarGalactica}");
	}

	~[ test .getPureName on arrayed generic ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		WakeType.classname = "Bears";
		WakeType.arrayed = 1;
		$WakeType.classname = "Beets";

		WakeType.parameters.push($WakeType);
		Asserts.that(WakeType.getPureName())Equals("Bears{Beets}[]");
	}

	~[ test .getPureName on optional ]~(Asserts) {
		var WakeType:class from this;
		var $WakeType:class from this;
		WakeType.classname = "Bears";
		WakeType.optional = 1;

		Asserts.that(WakeType.getPureName())Equals("Bears?");
	}

	~[ test methods don't import a classname ]~(Asserts) {
		var WakeType from this;
		WakeType.type = 1;
		Asserts.that(WakeType.getNeededImports().getSize())Equals(0);
	}
