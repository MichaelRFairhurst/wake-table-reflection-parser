import ImportFilterer;
import SpecificWakeType;

every WakeType is:

	with public Num type = 0;
	with public Text specialty = "";
	with public WakeClassType? = nothing;
	with public WakeListType? = nothing;
	with public WakeOptionalType? = nothing;
	with public WakeLambdaType? = nothing;
	with public WakeParameterizedType? = nothing;
	with SpecificWakeType? = nothing;

	needs ImportFilterer;

	provides Exception;

	SpecificWakeType -- getSpecificType() {
		var $SpecificWakeType? = SpecificWakeType;
		if $SpecificWakeType exists {} else {
			trySetSpecificWakeType((cast SpecificWakeType?) WakeClassType);
			trySetSpecificWakeType((cast SpecificWakeType?) WakeListType);
			trySetSpecificWakeType((cast SpecificWakeType?) WakeOptionalType);
			trySetSpecificWakeType((cast SpecificWakeType?) WakeLambdaType);
			trySetSpecificWakeType((cast SpecificWakeType?) WakeParameterizedType);
		}

		$SpecificWakeType? = SpecificWakeType;
		if $SpecificWakeType exists {
			return $SpecificWakeType;
		}

		throw Exception from this;
	}

	trySetSpecificWakeType(SpecificWakeType? type) {
		if(SpecificWakeType != nothing) {
			return;
		}

		if type exists {
			SpecificWakeType = type;
		}
	}

	Text -- getPureName() {
		return getSpecificType().getPureName();
	}

	Text[] -- getNeededImports() {
		return getSpecificType().getNeededImports();
	}

every WakeOptionalType (capable SpecificWakeType) is:

	with public Num levels = 0; // optionals & lists
	needs public WakeType:contained contained; // optionals & lists

	Text -- getPureName() {
		var Text = contained.getPureName();

		if(levels != 0) Text += "?";

		return Text;
	}

	Text[] -- getNeededImports() {
		return contained.getNeededImports();
	}

every WakeListType (capable SpecificWakeType) is:

	with public Num levels = 0; // optionals & lists
	needs public WakeType:contained contained; // optionals & lists

	Text -- getPureName() {
		var Text = contained.getPureName();

		for(var Num = 0; Num < levels; Num += 1) { // todo foreach range
			Text += "[]";
		}

		return Text;
	}

	Text[] -- getNeededImports() {
		return contained.getNeededImports();
	}

every WakeClassType (capable SpecificWakeType) is:

	with public Text classname = "";
	with public Num shadow = 0;
	with public WakeType[] parameters = [];

	needs ImportFilterer;

	Text -- getPureName() {
		var Text = classname;

		if(parameters.getSize() > 0) {
			var Bool first = true;

			Text += '{';
			var WakeType[] = parameters;
			foreach(WakeType[]) { // @TODO foreach on alias
				if(!first) Text += ',';
				first = false;
				Text += WakeType.getPureName();
			}
			Text += '}';
		}

		return Text;
	}

	Text[] -- getNeededImports() {
		var Text[] = [];
		if(!ImportFilterer.check(classname)IsAPrimitive())
			Text[].push(classname);

		if(parameters.getSize() != 0) {
			var WakeType[] = parameters;
			foreach(WakeType[])
			foreach($Text in WakeType.getNeededImports()) {
				if(ImportFilterer.check($Text)IsAPrimitive()) continue;
				if(Text[].contains($Text)) continue;

				Text[].push($Text);
			}
		}

		return Text[];
	}

every WakeLambdaType (capable SpecificWakeType) is:

	with public WakeType[] arguments = [];
	with public WakeType? returntype = nothing;

	needs ImportFilterer;

	provides Exception;

	Text -- getPureName() {
		throw Exception from this;
	}

	Text[] -- getNeededImports() {
		var Text[] = [];

		var WakeType[] = arguments;
		foreach(WakeType[])
		foreach($Text in WakeType.getNeededImports()) {
			if(ImportFilterer.check($Text)IsAPrimitive()) continue;
			if(Text[].contains($Text)) continue;

			Text[].push($Text);
		}

		var WakeType? = returntype;
		if WakeType exists
		foreach($Text in WakeType.getNeededImports()) {
			if(ImportFilterer.check($Text)IsAPrimitive()) continue;
			if(Text[].contains($Text)) continue;

			Text[].push($Text);
		}

		return Text[];
	}

every WakeParameterizedType (capable SpecificWakeType) is:

	with public Text label = "";
	with public Num shadow = 1;
	with public WakeType? upperbound = nothing;
	with public WakeType? lowerbound = nothing;

	Text -- getPureName() {
		return label;
	}

	Text[] -- getNeededImports() {
		var Text[] = [];
		return Text[];
	}
