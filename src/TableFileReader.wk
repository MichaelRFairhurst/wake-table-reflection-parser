import File;
import WakeType;
import WakeClass;
import Map;
import WakeProperty;
import ReflectionProvider;
import ImportFilterer;
import WakeClassType;
import WakeListType;
import WakeLambdaType;
import WakeParameterizedType;
import WakeOptionalType;

every TableFileReader is:

	needs ReflectionProvider;

	with public WakeClass[] addingClass = [];

	WakeClass -- readFrom(File) {
		var WakeClass from ReflectionProvider;
		WakeClass.classname = readTextWithLengthTag(File);

		if(File.readUnsignedChar() != 0) WakeClass.isAbstract = true;

		var tag Num = 0;
		while((tag := File.readUnsignedChar()) != 0) {
			var Text = File.read(tag); // get method name
			var Text casing = readTextWithLengthTag(File); // get Casing
			var flags Num = File.readUnsignedChar();
			var WakeType = readType(File);
			var WakeProperty from ReflectionProvider;

			WakeProperty.WakeType = WakeType;
			WakeProperty.name = Text;
			WakeProperty.flags = flags;
			WakeProperty.casing = casing.split('#');
			WakeClass.properties.put(Text, WakeProperty);
		}

		while((tag := File.readUnsignedChar()) != 0) {
			var Text = File.read(tag); // get classname
			var Num = File.readUnsignedChar();
			if(Num != 0) WakeClass.parentclass = Text;
			else WakeClass.interfaces.push(Text);
		}

		return WakeClass;

		// For this we need file.eof()
		while((tag := File.readUnsignedChar()) != 0) {
			WakeClass.parameters.push(readType(File));
		}

	}

	WakeType -- readType(File) {
		return readTypeByTag(File.readUnsignedChar(), File);
	}

	WakeType -- readTypeByTag(Num tag, File) {
		var WakeType from ReflectionProvider;
		WakeType.type = tag;
		if(tag == 1) {
			var WakeLambdaType from ReflectionProvider;
			if((File.readUnsignedChar()) != 0) {
				WakeLambdaType.returntype = readType(File);
			}
			while((tag := File.readUnsignedChar()) != 0) {
				WakeLambdaType.arguments.push(readTypeByTag(tag, File));
			}
			WakeType.WakeLambdaType = WakeLambdaType;
		} else if(tag == 2) {
			var WakeClassType from ReflectionProvider;
			WakeClassType.classname = readTextWithLengthTag(File);
			while((tag := File.readUnsignedChar()) != 0) {
				WakeClassType.parameters.push(readTypeByTag(tag, File));
			}
			File.readUnsignedChar(); // shadow
			WakeType.WakeClassType = WakeClassType;
		} else if(tag == 3) {
			var WakeParameterizedType from ReflectionProvider;
			WakeParameterizedType.label = readTextWithLengthTag(File); // label
			if((tag := File.readUnsignedChar()) != 0) {
				WakeParameterizedType.upperbound = readType(File);
			}
			if((tag := File.readUnsignedChar()) != 0) {
				WakeParameterizedType.lowerbound = readType(File);
			}
			File.readUnsignedChar(); // shadow
			WakeType.WakeParameterizedType = WakeParameterizedType;
		} else if(tag == 7) {
			ReflectionProvider.contained = readType(File);
			var Num levels = File.readUnsignedChar();
			var WakeListType from ReflectionProvider; // @Todo ctor args
			WakeListType.levels = levels;
			WakeType.WakeListType = WakeListType;
		} else if(tag == 8) {
			ReflectionProvider.contained = readType(File);
			var Num levels = File.readUnsignedChar();
			var WakeOptionalType from ReflectionProvider; // @Todo ctor args
			WakeOptionalType.levels = levels;
			WakeType.WakeOptionalType = WakeOptionalType;
		}
		readTextWithLengthTag(File); // read alias
		WakeType.specialty = readTextWithLengthTag(File);

		return WakeType;
	}

	Text -- readTextWithLengthTag(File) {
		var Num = File.readUnsignedChar();
		if(Num == 0) return "";
		return File.read(Num);
	}
