module treflect;

import io.File;
import std.Map;
import treflect.WakeType;
import treflect.VarRef;
import treflect.WakeClass;
import treflect.WakeProperty;
import treflect.ReflectionProvider;
import treflect.ImportFilterer;
import treflect.WakeVarDecl;
import treflect.WakeSpecializableVarDecl;
import treflect.WakeClassType;
import treflect.WakeListType;
import treflect.WakeLambdaType;
import treflect.WakeParameterizedType;
import treflect.WakeOptionalType;
import treflect.Annotation;
import treflect.AnnotationVal;
import treflect.UnusableTableFileVersionException;

every TableFileReader is:

	needs ReflectionProvider;

	with public WakeClass[] addingClass = [];

	with Int newestVersion = 6;
	with Int oldestVersion = 6;

	WakeClass -- readFrom(File) {
		var version = File.readUnsignedChar();

		if version < oldestVersion || version > newestVersion {
			throw UnusableTableFileVersionException(version, newestVersion) from ReflectionProvider;
		}

		var WakeClass from ReflectionProvider;
		WakeClass.modulename = readTextWithLengthTag(File);
		WakeClass.classname = readTextWithLengthTag(File);

		if File.readUnsignedChar() != 0 then WakeClass.isAbstract = true;

		var Int properties = File.readUnsignedChar();
		while (properties -= 1) >= 0 {
			var Text = readTextWithLengthTag(File); // get method name
			var casing = readTextWithLengthTag(File); // get Casing
			var flags = File.readUnsignedChar();
			var WakeVarDecl = readVarDecl(File);
			var WakeProperty(WakeVarDecl) from ReflectionProvider;

			WakeProperty.name = Text;
			WakeProperty.flags = flags;
			WakeProperty.casing = casing.split('#');
			WakeProperty.Annotation[] = getAnnotations(File);
			WakeClass.properties.put(Text, WakeProperty);
		}

		var needsNum = File.readUnsignedChar();
		while (needsNum -= 1) >= 0 {
			var flags = File.readUnsignedChar();
			var WakeSpecializableVarDecl = readSpecializableVarDecl(File);

			WakeClass.needTypes.push(WakeSpecializableVarDecl);
			var WakeProperty(WakeSpecializableVarDecl.WakeVarDecl) from ReflectionProvider;

			WakeProperty.name = WakeProperty.WakeVarDecl.getVarRef().toText();
			WakeProperty.Annotation[] = getAnnotations(File);
		}

		var Int parents = File.readUnsignedChar();
		while (parents -= 1) >= 0 {
			var Text = readTextWithLengthTag(File); // get parent name
			if File.readUnsignedChar() != 0 {
				WakeClass.parentclass = Text;
			} else {
				WakeClass.interfaces.push(Text);
			}
		}

		var Int params = File.readUnsignedChar();
		while (params -= 1) >= 0 {
			WakeClass.parameters.push(readType(File));
		}

		WakeClass.Annotation[] = getAnnotations(File);

		return WakeClass;

	}

	WakeVarDecl -- readVarDecl(File) {
		var WakeType = readType(File);
		var WakeVarDecl(WakeType) from ReflectionProvider;
		WakeVarDecl.shadow = File.readUnsignedChar();
		WakeVarDecl.alias = readTextWithLengthTag(File);

		return WakeVarDecl;
	}

	WakeSpecializableVarDecl -- readSpecializableVarDecl(File) {
		var WakeVarDecl = readVarDecl(File);
		var WakeSpecializableVarDecl(WakeVarDecl) from ReflectionProvider;
		WakeSpecializableVarDecl.specialty = readTextWithLengthTag(File);
		return WakeSpecializableVarDecl;
	}

	WakeType -- readType(File) {
		return readTypeByTag(File.readUnsignedChar(), File);
	}

	WakeType -- readTypeByTag(Int tag, File) {
		var WakeType from ReflectionProvider;
		WakeType.type = tag;
		if tag == 1 {
			var WakeLambdaType from ReflectionProvider;
			if (File.readUnsignedChar()) != 0 {
				WakeLambdaType.returntype = readType(File);
			}
			var Int args = File.readUnsignedChar();
			while (args -= 1) >= 0 {
				WakeLambdaType.arguments.push(readType(File));
			}
			WakeType.WakeLambdaType = WakeLambdaType;
		} else if tag == 2 {
			var WakeClassType from ReflectionProvider;
			WakeClassType.modulename = readTextWithLengthTag(File);
			WakeClassType.classname = readTextWithLengthTag(File);
			var Int params = File.readUnsignedChar();
			while (params -= 1) >= 0 {
				WakeClassType.parameters.push(readType(File));
			}
			WakeType.WakeClassType = WakeClassType;
		} else if tag == 3 || tag == 9 {
			var WakeParameterizedType from ReflectionProvider;
			if tag == 9 {
				WakeParameterizedType.isArgParameterization = true;
			}
			WakeParameterizedType.label = readTextWithLengthTag(File); // label
			if (tag := File.readUnsignedChar()) != 0 {
				WakeParameterizedType.upperbound = readTypeByTag(tag, File);
			}
			if (tag := File.readUnsignedChar()) != 0 {
				WakeParameterizedType.lowerbound = readTypeByTag(tag, File);
			}
			WakeType.WakeParameterizedType = WakeParameterizedType;
		} else if tag == 7 {
			ReflectionProvider.contained = readType(File);
			var WakeListType from ReflectionProvider; // @Todo ctor args
			WakeType.WakeListType = WakeListType;
		} else if tag == 8 {
			ReflectionProvider.contained = readType(File);
			var WakeOptionalType from ReflectionProvider; // @Todo ctor args
			WakeType.WakeOptionalType = WakeOptionalType;
		}

		return WakeType;
	}

	Text -- readTextWithLengthTag(File) {
		var Int = File.readUnsignedChar();
		if Int == 0 then return "";
		return File.read(Int);
	}

	Annotation[] -- getAnnotations(File) {
		var Annotation[] = [];

		var Int annotations = File.readUnsignedChar();
		while (annotations -= 1) >= 0 {
			var name = readTextWithLengthTag(File);
			var Annotation(name) from ReflectionProvider;
			Annotation[].push(Annotation);

			var Int vals = File.readUnsignedChar();
			while (vals -= 1) >= 0 {
				var Int = File.readUnsignedChar();
				var AnnotationVal from ReflectionProvider;
				Annotation.AnnotationVal[].push(AnnotationVal);
				if Int == 1 {
					AnnotationVal.Text = readTextWithLengthTag(File);
				} else if Int == 2 {
					// aaaah!!
				} else if Int == 3 {
					AnnotationVal.Bool = true if File.readUnsignedChar() else false;
				}
			}
		}

		return Annotation[];
	}
