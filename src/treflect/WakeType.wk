module treflect;

import std.Map;
import treflect.Annotation;
import treflect.WakeProperty;
import treflect.WakeType;
import treflect.WakeSpecializableVarDecl;

every WakeClass is:

	needs public Map{Text, WakeProperty} properties;

	with public Bool isAbstract = false;
	with public Text classname = "";
	with public Text modulename = "";
	with public WakeSpecializableVarDecl[] needTypes = [];
	with public WakeType[] parameters = [];
	with public WakeType[] appliedParameters = [];
	with public Annotation[] = [];

	with public Text? parentclass = nothing;
	with public Text[] interfaces = [];

	Text[] -- getApiImports() {
		var Text[] = [];
		foreach property in properties.getKeys() {
			var WakeProperty? = properties.get(property);

			if WakeProperty exists {
				foreach $Text in WakeProperty.getNeededImports() {

					if !Text[].contains($Text) then Text[].push($Text);
				}
			}
		}

		return Text[];
	}

	Text -- getFQClassname() {
		if(modulename == "") {
			return classname;
		}

		return modulename + "." + classname;
	}
