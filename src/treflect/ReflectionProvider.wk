module treflect;

import std.Map;
import treflect.WakeType;
import treflect.WakeProperty;
import treflect.ImportFilterer;
import treflect.WakeClass;
import treflect.WakeListType;
import treflect.WakeOptionalType;
import treflect.WakeParameterizedType;
import treflect.WakeLambdaType;
import treflect.WakeClassType;
import treflect.Annotation;
import treflect.AnnotationVal;
import treflect.UnusableTableFileVersionException;

every ReflectionProvider is:

	provides WakeType, WakeClass, Map{Text, WakeProperty}, WakeProperty, ImportFilterer, Exception,
		WakeClassType,
		WakeOptionalType,// <- WakeOptionalType(WakeType:contained),
		WakeListType,// <- WakeListType(WakeType:contained),
		WakeParameterizedType,
		WakeLambdaType,
		Annotation <- Annotation(?Text),
		AnnotationVal,
		WakeType:contained <- {
			var WakeType? = contained;
			if WakeType exists {
				return WakeType;
			} else {
				throw Exception from this;
			}
		},
		UnusableTableFileVersionException <- UnusableTableFileVersionException(?Num, ?Num);

	with public WakeType? contained = nothing;
